# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Bidder {
  bidderCode: String
  bidderSettings: JSONObject
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input BidderCreateInput {
  bidderCode: String
  bidderSettings: JSONObject
}

input BidderOrderByInput {
  bidderCode: SortOrder
  bidderSettings: SortOrder
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input BidderUpdateInput {
  bidderCode: String
  bidderSettings: JSONObject
}

input BidderWhereInput {
  bidderCode: StringNullableFilter
  bidderSettings: JsonFilter
  id: StringFilter
}

input BidderWhereUniqueInput {
  id: String!
}

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createBidder(data: BidderCreateInput!): Bidder!
  createPublisher(data: PublisherCreateInput!): Publisher!
  createUser(data: UserCreateInput!): User!
  deleteBidder(where: BidderWhereUniqueInput!): Bidder!
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateBidder(data: BidderUpdateInput!, where: BidderWhereUniqueInput!): Bidder!
  updatePublisher(data: PublisherUpdateInput!, where: PublisherWhereUniqueInput!): Publisher!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Publisher {
  createdAt: DateTime!
  displayName: String!
  domainUrl: String!
  done: Boolean
  id: String!
  updatedAt: DateTime!
}

input PublisherCreateInput {
  displayName: String!
  domainUrl: String!
  done: Boolean
}

input PublisherOrderByInput {
  createdAt: SortOrder
  displayName: SortOrder
  domainUrl: SortOrder
  done: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PublisherUpdateInput {
  displayName: String
  domainUrl: String
  done: Boolean
}

input PublisherWhereInput {
  displayName: StringFilter
  domainUrl: StringFilter
  done: BooleanNullableFilter
  id: StringFilter
}

input PublisherWhereUniqueInput {
  id: String!
}

type Query {
  _biddersMeta(orderBy: [BidderOrderByInput!], skip: Float, take: Float, where: BidderWhereInput): MetaQueryPayload!
  _publishersMeta(orderBy: [PublisherOrderByInput!], skip: Float, take: Float, where: PublisherWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  bidder(where: BidderWhereUniqueInput!): Bidder
  bidders(orderBy: [BidderOrderByInput!], skip: Float, take: Float, where: BidderWhereInput): [Bidder!]!
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishers(orderBy: [PublisherOrderByInput!], skip: Float, take: Float, where: PublisherWhereInput): [Publisher!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
